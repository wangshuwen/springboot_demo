buildscript {
    ext {
        springBootVersion = '2.0.4.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

group = 'com.zkxh'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    maven {
        url "http://maven.aliyun.com/nexus/content/groups/public/"
    }
    mavenCentral()
}

// 设置 Java 源码所在目录
sourceSets {
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/main/java'
        }
    }
}

// 读取config文件夹中对应的配置文件
ext {
    def prop = new Properties()
    file("src/main/resources/config/jdbc-sql.properties")
            .withInputStream {
        prop.load(it)
    }
    file("src/main/resources/config/gradle.properties")
            .withInputStream {
        prop.load(it)
    }
    prop.each {
        project.extensions.add("$it.key", it.value)
    }
}


configurations {
    mybatisGenerator
}


dependencies {

    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.0'

//springBoot
    compile('org.springframework.boot:spring-boot-starter')
    compile('org.springframework.boot:spring-boot-starter-aop')


//插件整合
    compile('org.springframework.boot:spring-boot-starter-data-elasticsearch')
    compile('org.springframework.boot:spring-boot-starter-data-redis')
    compile('org.springframework.kafka:spring-kafka')


//websocket 整合
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-websocket', version: '2.0.4.RELEASE'


//common包
    compile group: 'commons-io', name: 'commons-io', version: '2.4'
    compile group: 'commons-lang', name: 'commons-lang', version: '2.6'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
    compile group: 'commons-fileupload', name: 'commons-fileupload', version: '1.3.1'
    compile group: 'commons-codec', name: 'commons-codec', version: '1.10'
    compile group: 'commons-configuration', name: 'commons-configuration', version: '1.10'


//log
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-logging', version: '2.0.4.RELEASE'



//mybatis
    compile('org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2')
    compile group: 'com.github.pagehelper', name: 'pagehelper-spring-boot-starter', version: '1.2.3'


//redis配置
 //   compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis', version: '2.0.1.RELEASE'
 //   compile group: 'redis.clients', name: 'jedis', version: '2.9.0'
//shiro
    compile group: 'org.crazycake', name: 'shiro-redis', version: '2.8.24'

//redis
    runtime('mysql:mysql-connector-java')

//数据源
    compile group: 'com.alibaba', name: 'druid-spring-boot-starter', version: '1.1.10'
    compile(group: 'com.alibaba', name: 'fastjson', version: '1.2.47')

//shiro 配置
//    compile group: 'org.apache.shiro', name: 'shiro-spring-boot-starter', version: '1.4.0'
    compile group: 'org.apache.shiro', name: 'shiro-spring', version: '1.4.0'


//热部署配置
    runtime('org.springframework.boot:spring-boot-devtools')

//mybatis自动生成工具
    mybatisGenerator(group: 'org.mybatis.generator', name: 'mybatis-generator-core', version: '1.3.5')

    testCompile('org.springframework.boot:spring-boot-starter-test')


//netty
    compile group: 'io.netty', name: 'netty-all', version: '4.1.29.Final'

//swagger2 API文档整合
    compile group: 'io.springfox', name: 'springfox-swagger2', version: '2.9.2'
    compile group: 'io.springfox', name: 'springfox-swagger-ui', version: '2.9.2'

    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.8.8.1'

//    provided group: 'javax', name: 'javaee-api', version: '8.0'



}


apply plugin: 'maven'

group = 'com.company.root'
// artifactId is taken by default, from folder name
version = '0.0.1-SNAPSHOT'

task writeNewPom << {
    pom {
        project {
            inceptionYear '2014'
            licenses {
                license {
                    name 'The Apache Software License, Version 2.0'
                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    distribution 'repo'
                }
            }
        }
    }.writeTo("pom.xml")
}


// 利用ant创建一个自动生成MyBatis目录文件的task
task mybatisGenerate {
    doLast {
        ant.properties['targetProject'] = projectDir.path
        ant.properties['jarDirection'] = project['jdbc.jarDirection']
        ant.properties['driverClass'] = project['driverClassName']
        ant.properties['connectionURL'] = project['url1001']
        ant.properties['userId'] = project['uname1001']
        ant.properties['password'] = project['password1001']
        ant.properties['src_main_java'] = project['mainUrl']
        ant.properties['src_main_resources'] = project['mainUrl']
        ant.properties['modelPackage'] = project['modelPackage']
        ant.properties['mapperPackage'] = project['mapperPackage']
        ant.properties['sqlMapperPackage'] = project['sqlMapperPackage']
        ant.properties['tableName'] = project['tableName']
        ant.properties['className'] = project['className']
        ant.taskdef(
                name: 'mbgenerator',
                classname: 'org.mybatis.generator.ant.GeneratorAntTask',
                classpath: configurations.mybatisGenerator.asPath
        )
        ant.mbgenerator(overwrite: true,
                configfile: 'src/main/resources/config/generatorConfig.xml',
                verbose: true) {
            propertyset {
                propertyref(name: 'targetProject')
                propertyref(name: 'jarDirection')
                propertyref(name: 'userId')
                propertyref(name: 'driverClass')
                propertyref(name: 'connectionURL')
                propertyref(name: 'password')
                propertyref(name: 'src_main_java')
                propertyref(name: 'src_main_resources')
                propertyref(name: 'modelPackage')
                propertyref(name: 'mapperPackage')
                propertyref(name: 'sqlMapperPackage')
                propertyref(name: 'tableName')
                propertyref(name: 'className')
            }
        }
    }
}